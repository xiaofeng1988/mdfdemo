/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2017-03-27 05:37:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.system.sysdept;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t\t \t// 上移，需要进行封装\r\n");
      out.write("\t\t\tfunction moveUp(){\r\n");
      out.write("\t\t\t \tvar totalChildCount = 0;\r\n");
      out.write("\t\t\t\tvar currNodeIndex = 0;\r\n");
      out.write("\t\t\t \t// 1：获取当前选择\r\n");
      out.write("\t\t\t\tvar selectNode = $('#treemenu901').tree('getSelected');\r\n");
      out.write("\t\t\t\tvar findPreNode ;\r\n");
      out.write("\t\t\t\t// 2：获取父节点\r\n");
      out.write("\t\t\t\tvar fatherNode = $('#treemenu901').tree('getParent', selectNode.target);\r\n");
      out.write("\t\t\t\tif(fatherNode != null){ // 存在父节点\r\n");
      out.write("\t\t\t\t\t// 3：获取所有的父节点的子节点\r\n");
      out.write("\t\t\t\t\tvar childNodes = $('#treemenu901').tree('getData', fatherNode.target);\r\n");
      out.write("\t\t\t\t\tvar brotherNodeids = childNodes.children;\r\n");
      out.write("\t\t\t\t\tvar totalChildCount = brotherNodeids.length;\r\n");
      out.write("\t\t\t\t\tfor(var i = 0; i < totalChildCount; i ++ ){\r\n");
      out.write("\t\t\t\t\t\tvar chNode =  brotherNodeids[i];\r\n");
      out.write("\t\t\t\t\t\tif(chNode.id == selectNode.id){\r\n");
      out.write("\t\t\t\t\t\t\tcurrNodeIndex = i;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(currNodeIndex == 0){\r\n");
      out.write("\t\t\t\t\t\t$.messager.alert(\"提示\",\"当前节点为最高节点，不能再进行上移操作！\",\"warning\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//获取上一个节点\r\n");
      out.write("\t\t\t\t\tvar preNode = brotherNodeids[currNodeIndex-1];\r\n");
      out.write("\t\t\t\t\tfindPreNode = preNode;\r\n");
      out.write("\t\t\t\t\tvar currNodeChilds = $('#treemenu901').tree('getData', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 删除当前节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('remove', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 添加新节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('insert', {\r\n");
      out.write("\t\t\t\t\t\tbefore: preNode.target,\r\n");
      out.write("\t\t\t\t\t\tdata: currNodeChilds\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tvar newChildNodes = $('#treemenu901').tree('getData', fatherNode.target);\r\n");
      out.write("\t \t\t\t\t// 重新选择该节点\r\n");
      out.write("\t\t\t\t\tvar newNode = newChildNodes.children[currNodeIndex-1];\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('select', newNode.target);\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t// 3：获取所有的父节点的子节点\r\n");
      out.write("\t\t\t\t\tvar childNodes = $('#treemenu901').tree('getRoots');\r\n");
      out.write("\t\t\t\t\t// 4：获取兄弟节点\r\n");
      out.write("\t\t\t\t\tfor(var i = 0; i < childNodes.length ; i++){\r\n");
      out.write("\t\t\t\t\t\tvar chNode = childNodes[i];\r\n");
      out.write("\t\t\t\t\t\tif(chNode.id == selectNode.id){\r\n");
      out.write("\t\t\t\t\t\t\tcurrNodeIndex = i;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(currNodeIndex == 0){\r\n");
      out.write("\t\t\t\t\t\t$.messager.alert(\"提示\",\"当前节点为最高节点，不能再进行上移操作！\",\"warning\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//获取上一个节点\r\n");
      out.write("\t\t\t\t\tvar preNode = childNodes[currNodeIndex-1];\r\n");
      out.write("\t\t\t\t\tfindPreNode = preNode;\r\n");
      out.write("\t\t\t\t\tvar currNodeChilds = $('#treemenu901').tree('getData', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 删除当前节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('remove', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 添加新节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('insert', {\r\n");
      out.write("\t\t\t\t\t\tbefore: preNode.target,\r\n");
      out.write("\t\t\t\t\t\tdata: currNodeChilds\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t \t\t\t\t// 重新选择该节点\r\n");
      out.write("\t\t\t\t\tvar newChildNodes = $('#treemenu901').tree('getRoots');\r\n");
      out.write("\t\t\t\t\tvar newNode = newChildNodes[currNodeIndex-1];\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('select', newNode.target);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t// 向后台发送请求，当前节点值（newNode.id），当前角标值（newNode.orderId - 1）\r\n");
      out.write("\t\t\t\t$.post(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rootPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/systemController/sysDept/moveSysDept\", \r\n");
      out.write("\t\t\t\t\t\t{\"currSysDeptId\":selectNode.id, \"moveSysDeptId\":findPreNode.id},\r\n");
      out.write("\t\t\t\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\t\t\tif(data<1){\r\n");
      out.write("\t\t\t\t\t\t\t\t//$.messager.alert(\"提示\", \"上移成功！\",\"info\");\r\n");
      out.write("\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\t$.messager.alert(\"提示\", \"上移失败！\",\"error\");\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t);\r\n");
      out.write("\t\t\t }\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 下移，需要进行封装\r\n");
      out.write("\t\t\tfunction moveDown(){\r\n");
      out.write("\t\t\t \tvar totalChildCount = 0;\r\n");
      out.write("\t\t\t\tvar currNodeIndex = 0;\r\n");
      out.write("\t\t\t \t// 1：获取当前选择\r\n");
      out.write("\t\t\t\tvar selectNode = $('#treemenu901').tree('getSelected');\r\n");
      out.write("\t\t\t\tvar findNextNode ;\r\n");
      out.write("\t\t\t\t// 2：获取父节点\r\n");
      out.write("\t\t\t\tvar fatherNode = $('#treemenu901').tree('getParent', selectNode.target);\r\n");
      out.write("\t\t\t\tif(fatherNode != null){ // 存在父节点\r\n");
      out.write("\t\t\t\t\t// 3：获取所有的父节点的子节点\r\n");
      out.write("\t\t\t\t\tvar childNodes = $('#treemenu901').tree('getData', fatherNode.target);\r\n");
      out.write("\t\t\t\t\tvar brotherNodeids = childNodes.children;\r\n");
      out.write("\t\t\t\t\tvar totalChildCount = brotherNodeids.length;\r\n");
      out.write("\t\t\t\t\tfor(var i = 0; i < totalChildCount; i ++ ){\r\n");
      out.write("\t\t\t\t\t\tvar chNode =  brotherNodeids[i];\r\n");
      out.write("\t\t\t\t\t\tif(chNode.id == selectNode.id){\r\n");
      out.write("\t\t\t\t\t\t\tcurrNodeIndex = i;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(currNodeIndex == totalChildCount-1){\r\n");
      out.write("\t\t\t\t\t\t$.messager.alert(\"提示\", \"当前节点为最低节点，不能再进行下移操作！\",\"warning\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//获取下一个节点\r\n");
      out.write("\t\t\t\t\tvar preNode = brotherNodeids[currNodeIndex+1];\r\n");
      out.write("\t\t\t\t\tfindNextNode = preNode;\r\n");
      out.write("\t\t\t\t\tvar currNodeChilds = $('#treemenu901').tree('getData', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 删除当前节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('remove', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 添加新节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('insert', {\r\n");
      out.write("\t\t\t\t\t\tafter: preNode.target,\r\n");
      out.write("\t\t\t\t\t\tdata: currNodeChilds\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tvar newChildNodes = $('#treemenu901').tree('getData', fatherNode.target);\r\n");
      out.write("\t \t\t\t\t// 重新选择该节点\r\n");
      out.write("\t\t\t\t\tvar newNode = newChildNodes.children[currNodeIndex+1];\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('select', newNode.target);\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t// 3：获取所有的父节点的子节点\r\n");
      out.write("\t\t\t\t\tvar childNodes = $('#treemenu901').tree('getRoots');\r\n");
      out.write("\t\t\t\t\t// 4：获取兄弟节点\r\n");
      out.write("\t\t\t\t\tfor(var i = 0; i < childNodes.length ; i++){\r\n");
      out.write("\t\t\t\t\t\tvar chNode = childNodes[i];\r\n");
      out.write("\t\t\t\t\t\tif(chNode.id == selectNode.id){\r\n");
      out.write("\t\t\t\t\t\t\tcurrNodeIndex = i;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(currNodeIndex == childNodes.length -1 ){\r\n");
      out.write("\t\t\t\t\t\t$.messager.alert(\"提示\", \"当前节点为最低节点，不能再进行下移操作！\",\"warning\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//获取上一个节点\r\n");
      out.write("\t\t\t\t\tvar preNode = childNodes[currNodeIndex+1];\r\n");
      out.write("\t\t\t\t\tfindNextNode = preNode;\r\n");
      out.write("\t\t\t\t\tvar currNodeChilds = $('#treemenu901').tree('getData', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 删除当前节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('remove', selectNode.target);\r\n");
      out.write("\t\t\t\t\t// 添加新节点\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('insert', {\r\n");
      out.write("\t\t\t\t\t\tafter: preNode.target,\r\n");
      out.write("\t\t\t\t\t\tdata: currNodeChilds\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t \t\t\t\t// 重新选择该节点\r\n");
      out.write("\t\t\t\t\tvar newChildNodes = $('#treemenu901').tree('getRoots');\r\n");
      out.write("\t\t\t\t\tvar newNode = newChildNodes[currNodeIndex+1];\r\n");
      out.write("\t\t\t\t\t$('#treemenu901').tree('select', newNode.target);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t// 向后台发送请求，当前节点值（newNode.id），当前角标值（newNode.orderId - 1）\r\n");
      out.write("\t\t\t\t$.post(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rootPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/systemController/sysDept/moveSysDept\", \r\n");
      out.write("\t\t\t\t\t\t{\"currSysDeptId\":selectNode.id, \"moveSysDeptId\":findNextNode.id},\r\n");
      out.write("\t\t\t\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\t\t\tif(data<1){\r\n");
      out.write("\t\t\t\t\t\t\t\t//$.messager.alert(\"提示\", \"下移成功！\",\"info\");\r\n");
      out.write("\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\t$.messager.alert(\"提示\", \"下移失败！\",\"error\");\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t);\r\n");
      out.write("\t\t\t }\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t\r\n");
      out.write("<table class=\"dept-tbl\" cellspacing=\"0\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th colspan=\"2\" style=\"text-align: left\">\r\n");
      out.write("\t\t\t<div id=\"currentdept901\">当前选择组织：");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sysDept.name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</th>\r\n");
      out.write("\t</tr>\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td class=\"tit\">\r\n");
      out.write("\t\t\t组织名称：\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<div id=\"deptname901\">\r\n");
      out.write("\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sysDept.name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td class=\"tit\">\r\n");
      out.write("\t\t\t组织简称：\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<div id=\"deptname901\">\r\n");
      out.write("\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sysDept.shortname }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td class=\"tit\">\r\n");
      out.write("\t\t\t组织类型：\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<div id=\"depttype901\">\r\n");
      out.write("\t\t\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sysDept.typeName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td class=\"tit\">\r\n");
      out.write("\t\t\t组织经度：\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<div id=\"depttype901\">\r\n");
      out.write("\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sysDept.longitude }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td class=\"tit\">\r\n");
      out.write("\t\t\t组织纬度：\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<div id=\"depttype901\">\r\n");
      out.write("\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sysDept.latitude }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("<!-- \t<tr> -->\r\n");
      out.write("<!-- \t\t<td class=\"tit\"> -->\r\n");
      out.write("<!-- \t\t\t组织边界： -->\r\n");
      out.write("<!-- \t\t</td> -->\r\n");
      out.write("<!-- \t\t<td> -->\r\n");
      out.write("<!-- \t\t\t<div id=\"depttype901\"> -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t\t</div> -->\r\n");
      out.write("<!-- \t\t</td> -->\r\n");
      out.write("<!-- \t</tr> -->\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td class=\"tit\">\r\n");
      out.write("\t\t\t\t修改排序：\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<div id=\"deptname901\">\r\n");
      out.write("\t\t\t\t\t<a id=\"btnup\"   href=\"javascript:void(0)\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-up',plain:true\" onclick=\"moveUp();\">上移节点</a>  \r\n");
      out.write("\t                <a id=\"btndown\" href=\"javascript:void(0)\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-down',plain:true\" onclick=\"moveDown();\">下移节点</a>  \r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("</table>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
